{"ast":null,"code":"var _jsxFileName = \"D:\\\\All-my-projects\\\\10-CROWNCLOTHING\\\\crown-clothing\\\\src\\\\components\\\\payment-form\\\\payment-form.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport Button from \"../button/button.component\";\nimport \"./payment-form.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaymentForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n  const paymentHandler = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsProcessingPayment(true);\n    const response = await fetch(\"/.netlify/functions/create-payment-intent\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amount: 10000\n      })\n    }).then(res => res.json());\n    console.log(\"response\", response);\n    const {\n      clientSecret\n    } = response;\n    const cardElement = elements.getElement(CardElement);\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: cardElement,\n        billing_details: {\n          name: \"Sukhchain\"\n        }\n      }\n    });\n    setIsProcessingPayment(false);\n    if (paymentResult.error) {\n      alert(`Payment failed: ${paymentResult.error.message}`);\n    } else {\n      if (paymentResult.paymentIntent.status === \"succeeded\") {\n        alert(\"Payment successful!\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: paymentHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Credit Card Payment:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          buttonType: \"inverted\",\n          disabled: isProcessingPayment,\n          children: isProcessingPayment ? \"Processing...\" : \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(PaymentForm, \"Om/R0oll3STdo2tlJeh/H05mhoc=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = PaymentForm;\nexport default PaymentForm;\nvar _c;\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"names":["React","useState","CardElement","useStripe","useElements","Button","jsxDEV","_jsxDEV","PaymentForm","_s","stripe","elements","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","amount","then","res","json","console","log","clientSecret","cardElement","getElement","paymentResult","confirmCardPayment","payment_method","card","billing_details","name","error","alert","message","paymentIntent","status","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","buttonType","disabled","_c","$RefreshReg$"],"sources":["D:/All-my-projects/10-CROWNCLOTHING/crown-clothing/src/components/payment-form/payment-form.component.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport Button from \"../button/button.component\";\r\nimport \"./payment-form.scss\";\r\n\r\nconst PaymentForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\r\n\r\n  const paymentHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    setIsProcessingPayment(true);\r\n\r\n    const response = await fetch(\"/.netlify/functions/create-payment-intent\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ amount: 10000 }),\r\n    }).then((res) => res.json());\r\n\r\n    console.log(\"response\", response);\r\n    const { clientSecret } = response;\r\n\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    const paymentResult = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: cardElement,\r\n        billing_details: {\r\n          name: \"Sukhchain\",\r\n        },\r\n      },\r\n    });\r\n\r\n    setIsProcessingPayment(false);\r\n\r\n    if (paymentResult.error) {\r\n      alert(`Payment failed: ${paymentResult.error.message}`);\r\n    } else {\r\n      if (paymentResult.paymentIntent.status === \"succeeded\") {\r\n        alert(\"Payment successful!\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"payment-popup\">\r\n      <div className=\"payment-container\">\r\n        <form onSubmit={paymentHandler}>\r\n          <h2>Credit Card Payment:</h2>\r\n          <CardElement />\r\n          <Button buttonType=\"inverted\" disabled={isProcessingPayment}>\r\n            {isProcessingPayment ? \"Processing...\" : \"Pay Now\"}\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}